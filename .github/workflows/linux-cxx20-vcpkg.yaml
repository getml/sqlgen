name: linux-cxx20-vcpkg 

on: [push]

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - compiler: llvm
            compiler-version: 16
            db: postgres
          - compiler: llvm
            compiler-version: 18
            db: postgres
          - compiler: gcc
            compiler-version: 11
            additional-dep: "g++-11"
            db: postgres
          - compiler: gcc
            compiler-version: 12
            db: postgres
          - compiler: gcc
            compiler-version: 14
            db: postgres
          - compiler: llvm
            compiler-version: 16
            db: sqlite 
          - compiler: llvm
            compiler-version: 18
            db: sqlite
          - compiler: gcc
            compiler-version: 11
            additional-dep: "g++-11"
            db: sqlite
          - compiler: gcc
            compiler-version: 12
            db: sqlite
          - compiler: gcc
            compiler-version: 14
            db: sqlite
          - compiler: llvm
            compiler-version: 16
            db: mysql 
          - compiler: llvm
            compiler-version: 18
            db: mysql
          - compiler: gcc
            compiler-version: 11
            additional-dep: "g++-11"
            db: mysql
          - compiler: gcc
            compiler-version: 12
            db: mysql
          - compiler: gcc
            compiler-version: 14
            db: mysql
    name: "${{ github.job }} (${{ matrix.compiler }}-${{ matrix.compiler-version }}-${{ matrix.db }})"
    runs-on: ubuntu-latest
    services:
      mysql:
        if: matrix.db == 'mysql'
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
            - '8888:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: "${{ github.job }}-${{ matrix.compiler }}-${{ matrix.compiler-version }}"
          max-size: "2G"
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y ninja-build ${{ matrix.additional-dep }}
      - name: Compile
        if: matrix.db == 'postgres' 
        run: |
          if [[ "${{ matrix.compiler }}" == "llvm" ]]; then
            export CC=clang-${{ matrix.compiler-version }}
            export CXX=clang++-${{ matrix.compiler-version }}
          elif [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            export CC=gcc-${{ matrix.compiler-version }}
            export CXX=g++-${{ matrix.compiler-version }}
          fi
          sudo ln -s $(which ccache) /usr/local/bin/$CC
          sudo ln -s $(which ccache) /usr/local/bin/$CXX
          $CXX --version
          cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=20 -DSQLGEN_BUILD_TESTS=ON -DSQLGEN_SQLITE3=OFF 
          cmake --build build
      - name: Compile
        if: matrix.db == 'sqlite' 
        run: |
          if [[ "${{ matrix.compiler }}" == "llvm" ]]; then
            export CC=clang-${{ matrix.compiler-version }}
            export CXX=clang++-${{ matrix.compiler-version }}
          elif [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            export CC=gcc-${{ matrix.compiler-version }}
            export CXX=g++-${{ matrix.compiler-version }}
          fi
          sudo ln -s $(which ccache) /usr/local/bin/$CC
          sudo ln -s $(which ccache) /usr/local/bin/$CXX
          $CXX --version
          cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=20 -DSQLGEN_BUILD_TESTS=ON -DSQLGEN_POSTGRES=OFF 
          cmake --build build
      - name: Compile
        if: matrix.db == 'mysql' 
        run: |
          if [[ "${{ matrix.compiler }}" == "llvm" ]]; then
            export CC=clang-${{ matrix.compiler-version }}
            export CXX=clang++-${{ matrix.compiler-version }}
          elif [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            export CC=gcc-${{ matrix.compiler-version }}
            export CXX=g++-${{ matrix.compiler-version }}
          fi
          sudo ln -s $(which ccache) /usr/local/bin/$CC
          sudo ln -s $(which ccache) /usr/local/bin/$CXX
          $CXX --version
          cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=20 -DSQLGEN_BUILD_TESTS=ON -DSQLGEN_MYSQL=ON -DSQLGEN_POSTGRES=OFF -DSQLGEN_SQLITE3=OFF -DBUILD_SHARED_LIBS=ON -DVCPKG_TARGET_TRIPLET=x64-linux-dynamic
          cmake --build build
      - name: Set up postgres
        if: matrix.db == 'postgres' 
        run: |
          sudo systemctl start postgresql.service
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'password';"
      - name: Set up mysql 
        if: matrix.db == 'mysql'
        run: |
          mysql -h 127.0.0.1 --port 8888 -u root -p password -e 'CREATE USER sqlgen IDENTIFIED WITH mysql_native_password BY password;'
          mysql -h 127.0.0.1 --port 8888 -u sqlgen -p password -e 'CREATE DATABASE sqlgen;'
      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure
