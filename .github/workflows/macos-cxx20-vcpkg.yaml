name: macos-cxx20-vcpkg

on: [push]

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  macos-clang:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "macos-latest"
            db: postgres
          - os: "macos-latest"
            db: sqlite
          - os: "macos-latest"
            db: mysql 
          - os: "macos-13"
            db: postgres
          - os: "macos-13"
            db: sqlite
          - os: "macos-13"
            db: mysql 
    name: "${{ github.job }} (${{ matrix.os }}-${{ matrix.db }})"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: "${{ github.job }}-${{ matrix.os }}"
          max-size: "2G"
          create-symlink: true
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
      - name: Install ninja 
        run: brew install ninja autoconf bison flex
        if: matrix.os == 'macos-latest'
      - name: Compile
        if: matrix.db == 'postgres' 
        env:
          CC: clang
          CXX: clang++
        run: |
          if [[ "${{ matrix.os == 'macos-latest' }}" == "true" ]]; then
            export VCPKG_FORCE_SYSTEM_BINARIES=arm
            export CMAKE_GENERATOR=Ninja
          fi
          $CXX --version
          cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=20 -DSQLGEN_BUILD_TESTS=ON -DSQLGEN_SQLITE3=OFF -DSQLGEN_BUILD_DRY_TESTS_ONLY=ON 
          cmake --build build -j 4
      - name: Compile
        if: matrix.db == 'sqlite' 
        env:
          CC: clang
          CXX: clang++
        run: |
          if [[ "${{ matrix.os == 'macos-latest' }}" == "true" ]]; then
            export VCPKG_FORCE_SYSTEM_BINARIES=arm
            export CMAKE_GENERATOR=Ninja
          fi
          $CXX --version
          cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=20 -DSQLGEN_BUILD_TESTS=ON -DSQLGEN_POSTGRES=OFF 
          cmake --build build -j 4
      - name: Compile
        if: matrix.db == 'mysql' 
        env:
          CC: clang
          CXX: clang++
        run: |
          if [[ "${{ matrix.os == 'macos-latest' }}" == "true" ]]; then
            export VCPKG_FORCE_SYSTEM_BINARIES=arm
            export CMAKE_GENERATOR=Ninja
          fi
          $CXX --version
          if [[ "${{ matrix.os == 'macos-latest' }}" == "true" ]]; then
            cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=20 -DSQLGEN_BUILD_TESTS=ON -DSQLGEN_MYSQL=ON -DSQLGEN_POSTGRES=OFF -DSQLGEN_SQLITE3=OFF -DBUILD_SHARED_LIBS=ON -DVCPKG_TARGET_TRIPLET=x64-osx-dynamic -DSQLGEN_BUILD_DRY_TESTS_ONLY=ON
          else
            cmake -S . -B build -G Ninja -DCMAKE_CXX_STANDARD=20 -DSQLGEN_BUILD_TESTS=ON -DSQLGEN_MYSQL=ON -DSQLGEN_POSTGRES=OFF -DSQLGEN_SQLITE3=OFF -DBUILD_SHARED_LIBS=ON -DVCPKG_TARGET_TRIPLET=arm64-osx-dynamic -DSQLGEN_BUILD_DRY_TESTS_ONLY=ON
          fi
          cmake --build build -j 4
      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure
